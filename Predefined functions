.data

msg_0:
	.word 5
	.ascii	"true\0"
msg_1:
	.word 6
	.ascii	"false\0"
msg_2:
	.word 1
	.ascii	"\0"

Called with: 	BL p_print_bool
	    	BL p_print_ln

p_print_ln:
	PUSH {lr}
	LDR r0, =msg_2
	ADD r0, r0, #4
	BL puts
	MOV r0, #0
	BL fflush
	POP {pc}
	
p_print_bool:
	PUSH {lr}
	CMP r0, #0
	LDRNE r0, =msg_0
	LDREQ r0, =msg_1
	ADD r0, r0, #4
	BL printf
	MOV r0, #0
	BL fflush
	POP {pc}

/* ************************ */

.data

msg_0:
	.word 13
	.ascii	"Hello World!\n"
msg_1:
	.word 5
	.ascii	"%.*s\0"

Called with: 	BL p_print_string

p_print_string:
	PUSH {lr}
	LDR r1, [r0]
	ADD r2, r0, #4
	LDR r0, =msg_1
	ADD r0, r0, #4
	BL printf
	MOV r0, #0
	BL fflush
	POP {pc}

/* ************************ */

.data

msg_0:
	.word 22
	.ascii	"An example integer is "
msg_1:
	.word 5
	.ascii	"%.*s\0"
msg_2:
	.word 3
	.ascii	"%d\0"
msg_3:
	.word 1
	.ascii	"\0"

p_print_string:
	PUSH {lr}
	LDR r1, [r0]
	ADD r2, r0, #4
	LDR r0, =msg_1
	ADD r0, r0, #4
	BL printf
	MOV r0, #0
	BL fflush
	POP {pc}
p_print_int:
	PUSH {lr}
	MOV r1, r0
	LDR r0, =msg_2
	ADD r0, r0, #4
	BL printf
	MOV r0, #0
	BL fflush
	POP {pc}
p_print_ln:
	PUSH {lr}
	LDR r0, =msg_3
	ADD r0, r0, #4
	BL puts
	MOV r0, #0
	BL fflush
	POP {pc}

/* ************************ */

.data

msg_0:
	.word 3
	.ascii	"%d\0"
msg_1:
	.word 1
	.ascii	"\0"
msg_2:
	.word 82
	.ascii	"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\n"
msg_3:
	.word 5
	.ascii	"%.*s\0"
	
Called with : 	ADDS r4, r4, r5
		BLVS p_throw_overflow_error
		
		CMP r5, r4, ASR #31
31		BLNE p_throw_overflow_error
		
And:		BL p_throw_runtime_error

p_throw_overflow_error:
	LDR r0, =msg_2
	BL p_throw_runtime_error
p_throw_runtime_error:
	BL p_print_string
	MOV r0, #-1
	BL exit
	
/* ************************ */
.data
1	
2	msg_0:
3		.word 4
4		.ascii	" = ("
5	msg_1:
6		.word 2
7		.ascii	", "
8	msg_2:
9		.word 3
10		.ascii	"%p\0"


p_print_reference:
80		PUSH {lr}
81		MOV r1, r0
82		LDR r0, =msg_2
83		ADD r0, r0, #4
84		BL printf
85		MOV r0, #0
86		BL fflush
87		POP {pc}

